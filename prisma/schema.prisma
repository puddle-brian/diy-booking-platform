generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                    @id @default(cuid())
  email                   String                    @unique
  username                String                    @unique
  passwordHash            String?
  role                    Role                      @default(USER)
  verified                Boolean                   @default(false)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  submittedArtists        Artist[]
  bids                    Bid[]
  conversations           ConversationParticipant[]
  favorites               Favorite[]
  memberships             Membership[]
  receivedMessages        Message[]                 @relation("ReceivedMessages")
  sentMessages            Message[]                 @relation("SentMessages")
  submittedInfrastructure SceneInfrastructure[]
  sceneReports            SceneReport[]
  shows                   Show[]
  tourRequests            TourRequest[]
  submittedVenues         Venue[]
  venueOffers             VenueOffer[]

  @@index([email])
  @@index([role])
  @@index([verified])
  @@index([createdAt])
}

model Location {
  id                  String                @id @default(cuid())
  country             String
  stateProvince       String?
  city                String
  latitude            Float?
  longitude           Float?
  sceneHealthScore    Int?
  createdAt           DateTime              @default(now())
  artists             Artist[]
  sceneInfrastructure SceneInfrastructure[]
  sceneReports        SceneReport[]
  venues              Venue[]

  @@index([country, stateProvince, city])
  @@index([city])
  @@index([stateProvince])
  @@index([latitude, longitude])
  @@map("locations")
}

model Venue {
  id             String          @id @default(cuid())
  name           String
  locationId     String
  venueType      VenueType
  capacity       Int?
  ageRestriction AgeRestriction?
  artistTypesWelcome String[]     // Artist types this venue welcomes (empty array means all types welcome)
  contactEmail   String?
  contactPhone   String?
  website        String?
  socialHandles  Json?
  equipment      Json?
  features       String[]
  pricing        Json?
  description    String?
  images         String[]
  verified       Boolean         @default(false)
  submittedById  String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  addressLine2   String?
  neighborhood   String?
  postalCode     String?
  streetAddress  String?
  bids           Bid[]
  sceneReports   SceneReport[]
  shows          Show[]
  venueOffers    VenueOffer[]
  offerTemplates VenueOfferTemplate[]
  location       Location        @relation(fields: [locationId], references: [id])
  submittedBy    User?           @relation(fields: [submittedById], references: [id])

  @@index([locationId])
  @@index([venueType])
  @@index([capacity])
  @@index([ageRestriction])
  @@index([verified])
  @@index([name])
  @@index([createdAt])
  @@map("venues")
}

model Artist {
  id             String           @id @default(cuid())
  name           String
  locationId     String
  artistType     ArtistType?
  genres         String[]
  members        Int?
  yearFormed     Int?
  tourStatus     TourStatus?
  contactEmail   String?
  website        String?
  socialHandles  Json?
  equipmentNeeds Json?
  description    String?
  images         String[]
  verified       Boolean          @default(false)
  submittedById  String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  templates      ArtistTemplate[]
  location       Location         @relation(fields: [locationId], references: [id])
  submittedBy    User?            @relation(fields: [submittedById], references: [id])
  shows          Show[]
  tourRequests   TourRequest[]
  venueOffers    VenueOffer[]

  @@index([locationId])
  @@index([artistType])
  @@index([genres])
  @@index([tourStatus])
  @@index([verified])
  @@index([name])
  @@index([createdAt])
  @@map("artists")
}

model SceneInfrastructure {
  id            String             @id @default(cuid())
  name          String
  type          InfrastructureType
  locationId    String
  contactInfo   Json?
  description   String?
  specialties   String[]
  verified      Boolean            @default(false)
  submittedById String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  location      Location           @relation(fields: [locationId], references: [id])
  submittedBy   User?              @relation(fields: [submittedById], references: [id])

  @@index([locationId])
  @@index([type])
  @@index([verified])
  @@map("scene_infrastructure")
}

model TourRequest {
  id              String        @id @default(cuid())
  artistId        String
  createdById     String
  title           String
  description     String?
  startDate       DateTime
  endDate         DateTime
  targetLocations String[]
  genres          String[]
  status          RequestStatus @default(ACTIVE)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  bids            Bid[]
  artist          Artist        @relation(fields: [artistId], references: [id])
  createdBy       User          @relation(fields: [createdById], references: [id])

  @@index([artistId])
  @@index([createdById])
  @@index([status])
  @@index([startDate, endDate])
  @@index([targetLocations])
  @@index([genres])
  @@index([createdAt])
  @@map("tour_requests")
}

model SceneReport {
  id         String     @id @default(cuid())
  locationId String?
  venueId    String?
  authorId   String
  title      String?
  content    String
  reportType ReportType
  rating     Int?
  createdAt  DateTime   @default(now())
  author     User       @relation(fields: [authorId], references: [id])
  location   Location?  @relation(fields: [locationId], references: [id])
  venue      Venue?     @relation(fields: [venueId], references: [id])

  @@index([locationId])
  @@index([venueId])
  @@index([authorId])
  @@index([reportType])
  @@index([rating])
  @@index([createdAt])
  @@map("scene_reports")
}

model Show {
  id             String          @id @default(cuid())
  title          String
  date           DateTime
  venueId        String
  artistId       String
  description    String?
  ticketPrice    Float?
  ageRestriction AgeRestriction?
  status         ShowStatus      @default(CONFIRMED)
  createdById    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  billingOrder   Json?
  capacity       Int?
  curfew         String?
  doorDeal       Json?
  doorsOpen      String?
  guarantee      Float?
  loadIn         String?
  notes          String?
  showTime       String?
  soundcheck     String?
  artist         Artist          @relation(fields: [artistId], references: [id])
  createdBy      User            @relation(fields: [createdById], references: [id])
  venue          Venue           @relation(fields: [venueId], references: [id])

  @@index([venueId])
  @@index([artistId])
  @@index([date])
  @@index([status])
  @@index([createdAt])
  @@map("shows")
}

model Bid {
  id              String      @id @default(cuid())
  tourRequestId   String
  venueId         String
  bidderId        String
  proposedDate    DateTime?
  message         String?
  amount          Float?
  status          BidStatus   @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  acceptedAt      DateTime?
  billingNotes    String?
  billingPosition String?
  cancelledAt     DateTime?
  cancelledReason String?
  declinedAt      DateTime?
  declinedReason  String?
  heldAt          DateTime?
  heldUntil       DateTime?
  holdPosition    Int?
  lineupPosition  Int?
  otherActs       String?
  setLength       Int?
  bidder          User        @relation(fields: [bidderId], references: [id])
  tourRequest     TourRequest @relation(fields: [tourRequestId], references: [id])
  venue           Venue       @relation(fields: [venueId], references: [id])

  @@index([tourRequestId])
  @@index([venueId])
  @@index([bidderId])
  @@index([status])
  @@index([proposedDate])
  @@index([holdPosition])
  @@index([createdAt])
  @@map("bids")
}

model Conversation {
  id           String                    @id @default(cuid())
  title        String?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  participants ConversationParticipant[]
  messages     Message[]

  @@index([createdAt])
  @@index([updatedAt])
  @@map("conversations")
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
  @@map("conversation_participants")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  receiverId     String?
  content        String
  createdAt      DateTime     @default(now())
  readAt         DateTime?
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  receiver       User?        @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
  @@index([readAt])
  @@map("messages")
}

model Feedback {
  id          String           @id @default(cuid())
  type        FeedbackType
  priority    FeedbackPriority
  title       String
  description String
  context     String?
  status      FeedbackStatus   @default(NEW)
  adminNotes  String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([type])
  @@index([priority])
  @@index([status])
  @@index([createdAt])
  @@map("feedback")
}

model MediaEmbed {
  id          String     @id @default(cuid())
  entityType  EntityType
  entityId    String
  url         String
  title       String
  description String?
  order       Int        @default(0)
  isFeatured  Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([entityType, entityId])
  @@index([entityId])
  @@index([order])
  @@index([isFeatured])
  @@map("media_embeds")
}

model Membership {
  id          String           @id @default(cuid())
  userId      String
  entityType  EntityType
  entityId    String
  role        String
  permissions Json?
  status      MembershipStatus @default(ACTIVE)
  joinedAt    DateTime         @default(now())
  invitedBy   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id])

  @@unique([userId, entityType, entityId])
  @@index([entityType, entityId])
  @@index([userId])
  @@index([status])
  @@map("memberships")
}

model Favorite {
  id         String     @id @default(cuid())
  userId     String
  entityType EntityType
  entityId   String
  createdAt  DateTime   @default(now())
  user       User       @relation(fields: [userId], references: [id])

  @@unique([userId, entityType, entityId])
  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("favorites")
}

model ArtistTemplate {
  id                     String       @id @default(cuid())
  artistId               String
  name                   String
  type                   TemplateType
  isDefault              Boolean      @default(false)
  equipment              Json?
  technicalRequirements  Json?
  hospitalityRequirements Json?
  stageRequirements      String?
  soundCheckTime         Int?
  setLength              Int?
  guaranteeRange         Json?
  acceptsDoorDeals       Boolean?
  merchandising          Boolean?
  travelMethod           String?
  lodging                String?
  dietaryRestrictions    String[]
  expectedDraw           Json?
  ageRestriction         String?
  tourStatus             String?
  priority               String?
  description            String?
  notes                  String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  artist                 Artist       @relation(fields: [artistId], references: [id])

  @@index([artistId])
  @@index([type])
  @@index([isDefault])
  @@index([createdAt])
  @@index([name])
  @@map("artist_templates")
}

model VenueOffer {
  id              String      @id @default(cuid())
  venueId         String
  artistId        String      // Target artist for this offer
  createdById     String
  title           String      // e.g., "Headlining Slot - June 15th"
  description     String?
  proposedDate    DateTime
  alternativeDates DateTime[]  // Optional backup dates
  message         String?     // Personal pitch to the artist
  
  // Financial Terms (consistent with Bid model)
  amount          Float?      // Guarantee amount
  doorDeal        Json?       // Door split terms
  ticketPrice     Json?       // Advance/door pricing
  merchandiseSplit String?    // e.g., "90/10"
  
  // Show Details (consistent with Bid model)
  billingPosition String?     // headliner, support, opener
  lineupPosition  Int?        // 1 = headliner, 2 = support, etc.
  setLength       Int?        // Minutes
  otherActs       String?     // Other acts on the bill
  billingNotes    String?     // Additional billing context
  
  // Venue Details
  capacity        Int?
  ageRestriction  String?
  
  // Equipment & Logistics (consistent with VenueBidForm)
  equipmentProvided Json?     // PA, mics, drums, etc.
  loadIn          String?
  soundcheck      String?
  doorsOpen       String?
  showTime        String?
  curfew          String?
  
  // Additional Value
  promotion       Json?       // Social, flyers, radio, etc.
  lodging         Json?       // Floor space, couch, private room
  additionalTerms String?
  
  // Status Management (consistent with Bid model)
  status          OfferStatus @default(PENDING)
  acceptedAt      DateTime?
  declinedAt      DateTime?
  declinedReason  String?
  cancelledAt     DateTime?
  cancelledReason String?
  expiresAt       DateTime?   // Auto-expire offers
  
  // System fields
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  venue           Venue       @relation(fields: [venueId], references: [id])
  artist          Artist      @relation(fields: [artistId], references: [id])
  createdBy       User        @relation(fields: [createdById], references: [id])

  @@index([venueId])
  @@index([artistId])
  @@index([createdById])
  @@index([status])
  @@index([proposedDate])
  @@index([expiresAt])
  @@index([createdAt])
  @@map("venue_offers")
}

model VenueOfferTemplate {
  id                String       @id @default(cuid())
  venueId           String
  name              String       // e.g., "Standard Headliner Offer", "Support Slot Package"
  isDefault         Boolean      @default(false)
  
  // Financial Template
  amount            Float?       // Default guarantee
  doorDeal          Json?        // Default door split
  ticketPrice       Json?        // Default ticket pricing
  merchandiseSplit  String?      // Default merch split
  
  // Show Template
  billingPosition   String?      // Default billing position
  setLength         Int?         // Default set length
  
  // Venue Template
  equipmentProvided Json?        // Standard equipment offered
  loadIn            String?      // Standard load-in time
  soundcheck        String?      // Standard soundcheck time
  doorsOpen         String?      // Standard doors time
  showTime          String?      // Standard show time
  curfew            String?      // Standard curfew
  
  // Value-Add Template
  promotion         Json?        // Standard promotion support
  lodging           Json?        // Standard lodging offering
  
  // Message Template
  messageTemplate   String?      // Boilerplate pitch message
  additionalTerms   String?      // Standard additional terms
  
  // System fields
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relations
  venue             Venue        @relation(fields: [venueId], references: [id])

  @@index([venueId])
  @@index([isDefault])
  @@index([name])
  @@index([createdAt])
  @@map("venue_offer_templates")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum VenueType {
  HOUSE_SHOW
  BASEMENT
  CLUB
  BAR
  COFFEE_SHOP
  RECORD_STORE
  VFW_HALL
  COMMUNITY_CENTER
  WAREHOUSE
  PARK
  AMPHITHEATER
  OTHER
}

enum AgeRestriction {
  ALL_AGES
  EIGHTEEN_PLUS
  TWENTY_ONE_PLUS
}

enum ArtistType {
  BAND
  SOLO
  COLLECTIVE
  DJ
  OTHER
}

enum TourStatus {
  ACTIVE
  INACTIVE
  HIATUS
  SEEKING_MEMBERS
}

enum InfrastructureType {
  LABEL
  RADIO
  RECORD_STORE
  ZINE
  DISTRIBUTOR
  PHOTOGRAPHER
  SOUND_ENGINEER
  PROMOTER
}

enum RequestStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum ReportType {
  VENUE_REVIEW
  SCENE_REPORT
  TOUR_REPORT
  GENERAL
}

enum ShowStatus {
  CONFIRMED
  PENDING
  CANCELLED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
  HOLD
  CANCELLED
}

enum FeedbackType {
  BUG
  FEATURE
  UX
  CONTENT
  OTHER
}

enum FeedbackPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FeedbackStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
  WONT_FIX
}

enum EntityType {
  VENUE
  ARTIST
}

enum MembershipStatus {
  ACTIVE
  PENDING
  INACTIVE
}

enum TemplateType {
  TECH_RIDER
  BUSINESS
  LOGISTICS
  COMPLETE
}

enum OfferStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}
