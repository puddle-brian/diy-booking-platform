generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                    @id @default(cuid())
  email                     String                    @unique
  username                  String                    @unique
  passwordHash              String?
  role                      Role                      @default(USER)
  verified                  Boolean                   @default(false)
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  activityNotifications     ActivityNotification[]
  submittedArtists          Artist[]                  @relation("SubmittedArtists")
  ownedArtists              Artist[]                  @relation("OwnedArtists")
  bids                      Bid[]
  conversations             ConversationParticipant[]
  favorites                 Favorite[]
  requestedHolds            HoldRequest[]             @relation("RequestedHolds")
  respondedHolds            HoldRequest[]             @relation("RespondedHolds")
  memberships               Membership[]
  receivedMessages          Message[]                 @relation("ReceivedMessages")
  sentMessages              Message[]                 @relation("SentMessages")
  submittedInfrastructure   SceneInfrastructure[]
  sceneReports              SceneReport[]
  showRequestBids           ShowRequestBid[]
  showRequests              ShowRequest[]
  shows                     Show[]
  tourRequests              TourRequest[]
  venueOffers               VenueOffer[]
  submittedVenues           Venue[]

  @@index([email])
  @@index([role])
  @@index([verified])
  @@index([createdAt])
}

model Location {
  id                  String                @id @default(cuid())
  country             String
  stateProvince       String?
  city                String
  latitude            Float?
  longitude           Float?
  sceneHealthScore    Int?
  createdAt           DateTime              @default(now())
  artists             Artist[]
  sceneInfrastructure SceneInfrastructure[]
  sceneReports        SceneReport[]
  venues              Venue[]

  @@index([country, stateProvince, city])
  @@index([city])
  @@index([stateProvince])
  @@index([latitude, longitude])
  @@map("locations")
}

model Venue {
  id                 String               @id @default(cuid())
  name               String
  locationId         String
  venueType          VenueType
  capacity           Int?
  ageRestriction     AgeRestriction?
  contactEmail       String?
  contactPhone       String?
  website            String?
  socialLinks        Json?                // Renamed from socialHandles to match Artist model
  equipment          Json?
  features           String[]
  pricing            Json?
  description        String?
  images             String[]
  verified           Boolean              @default(false)
  submittedById      String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  addressLine2       String?
  neighborhood       String?
  postalCode         String?
  streetAddress      String?
  artistTypesWelcome String[]
  bids               Bid[]
  sceneReports       SceneReport[]
  showRequestBids    ShowRequestBid[]
  showRequests       ShowRequest[]
  shows              Show[]
  offerTemplates     VenueOfferTemplate[]
  venueOffers        VenueOffer[]
  location           Location             @relation(fields: [locationId], references: [id])
  submittedBy        User?                @relation(fields: [submittedById], references: [id])

  @@index([locationId])
  @@index([venueType])
  @@index([capacity])
  @@index([ageRestriction])
  @@index([verified])
  @@index([name])
  @@index([createdAt])
  @@map("venues")
}

model Artist {
  id               String                @id @default(cuid())
  name             String
  locationId       String                // Restored: Artist location
  genres           String[]
  artistType       ArtistType?           // Made optional to avoid breaking existing data
  members          Int?                  // Restored: Band member count
  yearFormed       Int?                  // Restored: Formation year
  description      String?
  contactEmail     String?
  contactPhone     String?
  website          String?
  socialLinks      Json?                 // Renamed from socialHandles
  tourStatus       TourStatus?           // Made optional to avoid breaking existing data
  equipmentNeeds   Json?                 // Restored: Equipment requirements
  images           String[]              // Restored: Artist images
  verified         Boolean               @default(false)  // Restored: Verification status
  submittedById    String?               // Restored: Who submitted this artist
  profileImage     String?
  profileCoverText String?
  recentUpdates    Json?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  ownerId          String?
  
  // Relations
  sceneReports     SceneReport[]
  showRequestBids  ShowRequestBid[]
  showRequests     ShowRequest[]         // Restored: Artist show requests
  shows            Show[]

  tourRequests     TourRequest[]
  templates        ArtistTemplate[]
  venueOffers      VenueOffer[]
  location         Location              @relation(fields: [locationId], references: [id])  // Restored
  submittedBy      User?                 @relation("SubmittedArtists", fields: [submittedById], references: [id])  // Restored
  owner            User?                 @relation("OwnedArtists", fields: [ownerId], references: [id])

  @@index([locationId])
  @@index([name])
  @@index([ownerId])
  @@index([artistType])
  @@index([genres])
  @@index([tourStatus])
  @@index([verified])
  @@index([createdAt])
  @@map("artists")
}

model SceneInfrastructure {
  id            String             @id @default(cuid())
  name          String
  type          InfrastructureType
  locationId    String
  contactInfo   Json?
  description   String?
  specialties   String[]
  verified      Boolean            @default(false)
  submittedById String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  location      Location           @relation(fields: [locationId], references: [id])
  submittedBy   User?              @relation(fields: [submittedById], references: [id])

  @@index([locationId])
  @@index([type])
  @@index([verified])
  @@map("scene_infrastructure")
}

model TourRequest {
  id              String        @id @default(cuid())
  artistId        String
  createdById     String
  title           String
  description     String?
  startDate       DateTime?
  endDate         DateTime?
  targetLocations String[]
  genres          String[]
  status          RequestStatus @default(ACTIVE)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isLegacyRange   Boolean       @default(false)
  requestDate     DateTime?
  bids            Bid[]
  artist          Artist        @relation(fields: [artistId], references: [id])
  createdBy       User          @relation(fields: [createdById], references: [id])

  @@index([artistId])
  @@index([createdById])
  @@index([status])
  @@index([startDate, endDate])
  @@index([requestDate])
  @@index([isLegacyRange])
  @@index([targetLocations])
  @@index([genres])
  @@index([createdAt])
  @@map("tour_requests")
}

model ShowRequest {
  id                String            @id @default(cuid())
  artistId          String
  venueId           String?
  title             String
  description       String?
  requestedDate     DateTime
  initiatedBy       RequestInitiator
  createdById       String
  status            ShowRequestStatus @default(OPEN)
  amount            Float?
  doorDeal          Json?
  ticketPrice       Json?
  merchandiseSplit  String?
  billingPosition   String?
  lineupPosition    Int?
  setLength         Int?
  otherActs         String?
  billingNotes      String?
  capacity          Int?
  ageRestriction    String?
  equipmentProvided Json?
  loadIn            String?
  soundcheck        String?
  doorsOpen         String?
  showTime          String?
  curfew            String?
  promotion         Json?
  lodging           Json?
  additionalTerms   String?
  message           String?
  targetLocations   String[]
  genres            String[]
  expiresAt         DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  holdRequests      HoldRequest[]
  bids              ShowRequestBid[]
  artist            Artist            @relation(fields: [artistId], references: [id])
  createdBy         User              @relation(fields: [createdById], references: [id])
  venue             Venue?            @relation(fields: [venueId], references: [id])

  @@index([artistId])
  @@index([venueId])
  @@index([requestedDate])
  @@index([status])
  @@index([initiatedBy])
  @@index([createdAt])
  @@map("show_requests")
}

model ShowRequestBid {
  id              String       @id @default(cuid())
  showRequestId   String
  venueId         String
  bidderId        String
  proposedDate    DateTime?
  message         String?
  amount          Float?
  status          BidStatus    @default(PENDING)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  acceptedAt      DateTime?
  billingNotes    String?
  billingPosition String?
  cancelledAt     DateTime?
  cancelledReason String?
  declinedAt      DateTime?
  declinedReason  String?
  heldAt          DateTime?
  heldUntil       DateTime?
  holdPosition    Int?
  lineupPosition  Int?
  otherActs       String?
  setLength       Int?
  frozenAt        DateTime?
  frozenByHoldId  String?
  holdState       BidHoldState @default(AVAILABLE)
  statusHistory   Json         @default("[]")
  unfrozenAt      DateTime?
  bidder          User         @relation(fields: [bidderId], references: [id])
  showRequest     ShowRequest  @relation(fields: [showRequestId], references: [id])
  venue           Venue        @relation(fields: [venueId], references: [id])
  Artist          Artist?      @relation(fields: [artistId], references: [id])
  artistId        String?

  @@index([showRequestId])
  @@index([venueId])
  @@index([bidderId])
  @@index([status])
  @@index([proposedDate])
  @@index([holdPosition])
  @@index([createdAt])
  @@map("show_request_bids")
}

model SceneReport {
  id         String     @id @default(cuid())
  locationId String?
  venueId    String?
  authorId   String
  title      String?
  content    String
  reportType ReportType
  rating     Int?
  createdAt  DateTime   @default(now())
  author     User       @relation(fields: [authorId], references: [id])
  location   Location?  @relation(fields: [locationId], references: [id])
  venue      Venue?     @relation(fields: [venueId], references: [id])
  Artist     Artist?    @relation(fields: [artistId], references: [id])
  artistId   String?

  @@index([locationId])
  @@index([venueId])
  @@index([authorId])
  @@index([reportType])
  @@index([rating])
  @@index([createdAt])
  @@map("scene_reports")
}

model Show {
  id             String          @id @default(cuid())
  title          String
  date           DateTime
  venueId        String
  artistId       String
  description    String?
  ticketPrice    Float?
  ageRestriction  AgeRestriction?
  status         ShowStatus      @default(CONFIRMED)
  createdById    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  capacity       Int?
  curfew         String?
  doorDeal       Json?
  doorsOpen      String?
  guarantee      Float?
  loadIn         String?
  notes          String?
  showTime       String?
  soundcheck     String?
  artistName     String?        // Cached artist name for display
  venueName      String?        // Cached venue name for display  
  city           String?        // Cached city for display
  state          String?        // Cached state for display
  country        String?        // Cached country for display
  holdRequests   HoldRequest[]
  artist         Artist          @relation(fields: [artistId], references: [id])
  createdBy      User            @relation(fields: [createdById], references: [id])
  venue          Venue           @relation(fields: [venueId], references: [id])

  @@index([venueId])
  @@index([artistId])
  @@index([date])
  @@index([status])
  @@index([createdAt])
  @@map("shows")
}

model Bid {
  id              String       @id @default(cuid())
  tourRequestId   String
  venueId         String
  bidderId        String
  proposedDate    DateTime?
  message         String?
  amount          Float?
  status          BidStatus    @default(PENDING)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  acceptedAt      DateTime?
  billingNotes    String?
  billingPosition String?
  cancelledAt     DateTime?
  cancelledReason String?
  declinedAt      DateTime?
  declinedReason  String?
  heldAt          DateTime?
  heldUntil       DateTime?
  holdPosition    Int?
  lineupPosition  Int?
  otherActs       String?
  setLength       Int?
  frozenAt        DateTime?
  frozenByHoldId  String?
  holdState       BidHoldState @default(AVAILABLE)
  statusHistory   Json         @default("[]")
  unfrozenAt      DateTime?
  bidder          User         @relation(fields: [bidderId], references: [id])
  tourRequest     TourRequest  @relation(fields: [tourRequestId], references: [id])
  venue           Venue        @relation(fields: [venueId], references: [id])

  @@index([tourRequestId])
  @@index([venueId])
  @@index([bidderId])
  @@index([status])
  @@index([proposedDate])
  @@index([holdPosition])
  @@index([createdAt])
  @@map("bids")
}

model Conversation {
  id           String                    @id @default(cuid())
  title        String?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  participants ConversationParticipant[]
  messages     Message[]

  @@index([createdAt])
  @@index([updatedAt])
  @@map("conversations")
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
  @@map("conversation_participants")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  receiverId     String?
  content        String
  createdAt      DateTime     @default(now())
  readAt         DateTime?
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  receiver       User?        @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
  @@index([readAt])
  @@map("messages")
}

model Feedback {
  id          String           @id @default(cuid())
  type        FeedbackType
  priority    FeedbackPriority
  title       String
  description String
  context     String?
  status      FeedbackStatus   @default(NEW)
  adminNotes  String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([type])
  @@index([priority])
  @@index([status])
  @@index([createdAt])
  @@map("feedback")
}

model MediaEmbed {
  id          String     @id @default(cuid())
  entityType  EntityType
  entityId    String
  url         String
  title       String
  description String?
  order       Int        @default(0)
  isFeatured  Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([entityType, entityId])
  @@index([entityId])
  @@index([order])
  @@index([isFeatured])
  @@map("media_embeds")
}

model Membership {
  id          String           @id @default(cuid())
  userId      String
  entityType  EntityType
  entityId    String
  role        String
  permissions Json?
  status      MembershipStatus @default(ACTIVE)
  joinedAt    DateTime         @default(now())
  invitedBy   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id])

  @@unique([userId, entityType, entityId])
  @@index([entityType, entityId])
  @@index([userId])
  @@index([status])
  @@map("memberships")
}

model Favorite {
  id         String     @id @default(cuid())
  userId     String
  entityType EntityType
  entityId   String
  createdAt  DateTime   @default(now())
  user       User       @relation(fields: [userId], references: [id])

  @@unique([userId, entityType, entityId])
  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("favorites")
}

model ArtistTemplate {
  id                      String       @id @default(cuid())
  artistId                String
  name                    String
  type                    TemplateType
  isDefault               Boolean      @default(false)
  equipment               Json?
  technicalRequirements   Json?
  hospitalityRequirements Json?
  stageRequirements       String?
  soundCheckTime          Int?
  setLength               Int?
  guaranteeRange          Json?
  acceptsDoorDeals        Boolean?
  merchandising           Boolean?
  travelMethod            String?
  lodging                 String?
  dietaryRestrictions     String[]
  expectedDraw            Json?
  ageRestriction          String?
  tourStatus              String?
  priority                String?
  description             String?
  notes                   String?
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  artist                  Artist       @relation(fields: [artistId], references: [id])

  @@index([artistId])
  @@index([type])
  @@index([isDefault])
  @@index([createdAt])
  @@index([name])
  @@map("artist_templates")
}

model VenueOffer {
  id                String        @id @default(cuid())
  venueId           String
  artistId          String
  createdById       String
  title             String
  description       String?
  proposedDate      DateTime
  alternativeDates  DateTime[]
  message           String?
  amount            Float?
  doorDeal          Json?
  ticketPrice       Json?
  merchandiseSplit  String?
  billingPosition   String?
  lineupPosition    Int?
  setLength         Int?
  otherActs         String?
  billingNotes      String?
  capacity          Int?
  ageRestriction    String?
  equipmentProvided Json?
  loadIn            String?
  soundcheck        String?
  doorsOpen         String?
  showTime          String?
  curfew            String?
  promotion         Json?
  lodging           Json?
  additionalTerms   String?
  status            OfferStatus   @default(PENDING)
  acceptedAt        DateTime?
  declinedAt        DateTime?
  declinedReason    String?
  cancelledAt       DateTime?
  cancelledReason   String?
  expiresAt         DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  frozenAt          DateTime?
  frozenByHoldId    String?
  holdState         BidHoldState  @default(AVAILABLE)
  statusHistory     Json          @default("[]")
  unfrozenAt        DateTime?
  holdRequests      HoldRequest[]
  artist            Artist        @relation(fields: [artistId], references: [id])
  createdBy         User          @relation(fields: [createdById], references: [id])
  venue             Venue         @relation(fields: [venueId], references: [id])

  @@index([venueId])
  @@index([artistId])
  @@index([createdById])
  @@index([status])
  @@index([proposedDate])
  @@index([expiresAt])
  @@index([createdAt])
  @@map("venue_offers")
}

model VenueOfferTemplate {
  id                String   @id @default(cuid())
  venueId           String
  name              String
  isDefault         Boolean  @default(false)
  amount            Float?
  doorDeal          Json?
  ticketPrice       Json?
  merchandiseSplit  String?
  billingPosition   String?
  setLength         Int?
  equipmentProvided Json?
  loadIn            String?
  soundcheck        String?
  doorsOpen         String?
  showTime          String?
  curfew            String?
  promotion         Json?
  lodging           Json?
  messageTemplate   String?
  additionalTerms   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  venue             Venue    @relation(fields: [venueId], references: [id])

  @@index([venueId])
  @@index([isDefault])
  @@index([name])
  @@index([createdAt])
  @@map("venue_offer_templates")
}

model HoldRequest {
  id              String       @id @default(cuid())
  showId          String?
  showRequestId   String?
  venueOfferId    String?
  requestedById   String
  respondedById   String?
  duration        Int
  reason          String
  customMessage   String?
  status          HoldStatus   @default(PENDING)
  requestedAt     DateTime     @default(now())
  respondedAt     DateTime?
  startsAt        DateTime?
  expiresAt       DateTime?
  frozenBidIds    String[]
  frozenOfferIds  String[]
  notifiedParties String[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  requestedBy     User         @relation("RequestedHolds", fields: [requestedById], references: [id])
  respondedBy     User?        @relation("RespondedHolds", fields: [respondedById], references: [id])
  show            Show?        @relation(fields: [showId], references: [id])
  showRequest     ShowRequest? @relation(fields: [showRequestId], references: [id])
  venueOffer      VenueOffer?  @relation(fields: [venueOfferId], references: [id])

  @@index([showRequestId, status])
  @@index([status, expiresAt])
  @@map("hold_requests")
}

model ActivityNotification {
  id            String       @id @default(cuid())
  userId        String
  type          ActivityType
  title         String
  summary       String
  fullContent   String?
  entityType    EntityType?
  entityId      String?
  actionUrl     String?
  metadata      Json?
  isRead        Boolean      @default(false)
  readAt        DateTime?
  actionTaken   Boolean      @default(false)
  actionTakenAt DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  expiresAt     DateTime?
  user          User         @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@index([entityType, entityId])
  @@index([expiresAt])
  @@map("activity_notifications")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum VenueType {
  HOUSE_SHOW
  BASEMENT
  CLUB
  BAR
  COFFEE_SHOP
  RECORD_STORE
  VFW_HALL
  COMMUNITY_CENTER
  WAREHOUSE
  PARK
  AMPHITHEATER
  OTHER
}

enum AgeRestriction {
  ALL_AGES
  EIGHTEEN_PLUS
  TWENTY_ONE_PLUS
}

enum ArtistType {
  BAND
  SOLO
  COLLECTIVE
  DJ
  OTHER
}

enum TourStatus {
  ACTIVE
  INACTIVE
  HIATUS
  SEEKING_MEMBERS
}

enum InfrastructureType {
  LABEL
  RADIO
  RECORD_STORE
  ZINE
  DISTRIBUTOR
  PHOTOGRAPHER
  SOUND_ENGINEER
  PROMOTER
}

enum RequestStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum ReportType {
  VENUE_REVIEW
  SCENE_REPORT
  TOUR_REPORT
  GENERAL
}

enum ShowStatus {
  CONFIRMED
  PENDING
  CANCELLED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
  HOLD
  CANCELLED
}

enum FeedbackType {
  BUG
  FEATURE
  UX
  CONTENT
  OTHER
}

enum FeedbackPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FeedbackStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
  WONT_FIX
}

enum EntityType {
  VENUE
  ARTIST
  SHOW
  SHOW_REQUEST
  BID
  VENUE_OFFER
  HOLD_REQUEST
  MESSAGE
  TOUR_REQUEST
}

enum MembershipStatus {
  ACTIVE
  PENDING
  INACTIVE
}

enum TemplateType {
  TECH_RIDER
  BUSINESS
  LOGISTICS
  COMPLETE
}

enum OfferStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

enum RequestInitiator {
  ARTIST
  VENUE
}

enum ShowRequestStatus {
  OPEN
  PENDING
  CONFIRMED
  DECLINED
  CANCELLED
  EXPIRED
}

enum HoldStatus {
  PENDING
  ACTIVE
  EXPIRED
  CANCELLED
  DECLINED
}

enum BidHoldState {
  AVAILABLE
  FROZEN
  HELD
  ACCEPTED_HELD
}

enum ActivityType {
  HOLD_REQUEST
  HOLD_GRANTED
  HOLD_DECLINED
  MESSAGE
  BID_UPDATE
  BID_RECEIVED
  SHOW_EDIT
  SHOW_CONFIRMED
  SHOW_REQUEST
  TOUR_REQUEST
  MEMBER_INVITE
  REVIEW_RECEIVED
  VENUE_OFFER
}


