generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                    @id @default(cuid())
  email                   String                    @unique
  username                String                    @unique
  passwordHash            String?
  role                    Role                      @default(USER)
  verified                Boolean                   @default(false)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  submittedArtists        Artist[]
  bids                    Bid[]
  conversations           ConversationParticipant[]
  favorites               Favorite[]
  memberships             Membership[]
  receivedMessages        Message[]                 @relation("ReceivedMessages")
  sentMessages            Message[]                 @relation("SentMessages")
  submittedInfrastructure SceneInfrastructure[]
  sceneReports            SceneReport[]
  shows                   Show[]
  tourRequests            TourRequest[]
  submittedVenues         Venue[]
  venueOffers             VenueOffer[]
  showRequests            ShowRequest[] // ðŸŽ¯ NEW: Unified show requests
  showRequestBids         ShowRequestBid[] // ðŸŽ¯ NEW: Bids on show requests
  requestedHolds          HoldRequest[]             @relation("RequestedHolds")
  respondedHolds          HoldRequest[]             @relation("RespondedHolds")
  activityNotifications   ActivityNotification[] // Activity feed notifications

  @@index([email])
  @@index([role])
  @@index([verified])
  @@index([createdAt])
}

model Location {
  id                  String                @id @default(cuid())
  country             String
  stateProvince       String?
  city                String
  latitude            Float?
  longitude           Float?
  sceneHealthScore    Int?
  createdAt           DateTime              @default(now())
  artists             Artist[]
  sceneInfrastructure SceneInfrastructure[]
  sceneReports        SceneReport[]
  venues              Venue[]

  @@index([country, stateProvince, city])
  @@index([city])
  @@index([stateProvince])
  @@index([latitude, longitude])
  @@map("locations")
}

model Venue {
  id                 String               @id @default(cuid())
  name               String
  locationId         String
  venueType          VenueType
  capacity           Int?
  ageRestriction     AgeRestriction?
  artistTypesWelcome String[] // Artist types this venue welcomes (empty array means all types welcome)
  contactEmail       String?
  contactPhone       String?
  website            String?
  socialHandles      Json?
  equipment          Json?
  features           String[]
  pricing            Json?
  description        String?
  images             String[]
  verified           Boolean              @default(false)
  submittedById      String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  addressLine2       String?
  neighborhood       String?
  postalCode         String?
  streetAddress      String?
  bids               Bid[]
  sceneReports       SceneReport[]
  shows              Show[]
  venueOffers        VenueOffer[]
  offerTemplates     VenueOfferTemplate[]
  showRequests       ShowRequest[] // ðŸŽ¯ NEW: Unified show requests
  showRequestBids    ShowRequestBid[] // ðŸŽ¯ NEW: Bids on show requests
  location           Location             @relation(fields: [locationId], references: [id])
  submittedBy        User?                @relation(fields: [submittedById], references: [id])

  @@index([locationId])
  @@index([venueType])
  @@index([capacity])
  @@index([ageRestriction])
  @@index([verified])
  @@index([name])
  @@index([createdAt])
  @@map("venues")
}

model Artist {
  id             String           @id @default(cuid())
  name           String
  locationId     String
  artistType     ArtistType?
  genres         String[]
  members        Int?
  yearFormed     Int?
  tourStatus     TourStatus?
  contactEmail   String?
  website        String?
  socialHandles  Json?
  equipmentNeeds Json?
  description    String?
  images         String[]
  verified       Boolean          @default(false)
  submittedById  String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  templates      ArtistTemplate[]
  location       Location         @relation(fields: [locationId], references: [id])
  submittedBy    User?            @relation(fields: [submittedById], references: [id])
  shows          Show[]
  tourRequests   TourRequest[]
  venueOffers    VenueOffer[]
  showRequests   ShowRequest[] // ðŸŽ¯ NEW: Unified show requests

  @@index([locationId])
  @@index([artistType])
  @@index([genres])
  @@index([tourStatus])
  @@index([verified])
  @@index([name])
  @@index([createdAt])
  @@map("artists")
}

model SceneInfrastructure {
  id            String             @id @default(cuid())
  name          String
  type          InfrastructureType
  locationId    String
  contactInfo   Json?
  description   String?
  specialties   String[]
  verified      Boolean            @default(false)
  submittedById String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  location      Location           @relation(fields: [locationId], references: [id])
  submittedBy   User?              @relation(fields: [submittedById], references: [id])

  @@index([locationId])
  @@index([type])
  @@index([verified])
  @@map("scene_infrastructure")
}

model TourRequest {
  id          String  @id @default(cuid())
  artistId    String
  createdById String
  title       String
  description String?

  // Legacy date range fields (keep for backward compatibility)
  startDate DateTime? // Made optional
  endDate   DateTime? // Made optional

  // New single date field
  requestDate   DateTime? // Single date for new requests
  isLegacyRange Boolean   @default(false) // Flag to track old vs new format

  targetLocations String[]
  genres          String[]
  status          RequestStatus @default(ACTIVE)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  bids            Bid[]
  artist          Artist        @relation(fields: [artistId], references: [id])
  createdBy       User          @relation(fields: [createdById], references: [id])

  @@index([artistId])
  @@index([createdById])
  @@index([status])
  @@index([startDate, endDate])
  @@index([requestDate]) // New index for single dates
  @@index([isLegacyRange]) // Index for filtering old vs new
  @@index([targetLocations])
  @@index([genres])
  @@index([createdAt])
  @@map("tour_requests")
}

// ðŸŽ¯ NEW UNIFIED MODEL: ShowRequest replaces both TourRequest and VenueOffer
model ShowRequest {
  id String @id @default(cuid())

  // WHO: Core entities
  artistId String
  venueId  String? // null = open to any venue (artist-initiated)

  // WHAT: Request details
  title         String
  description   String?
  requestedDate DateTime // Single date (no more ranges)

  // WHO INITIATED: Request source
  initiatedBy RequestInitiator // 'ARTIST' | 'VENUE'
  createdById String

  // STATUS: Unified workflow  
  status ShowRequestStatus @default(OPEN)

  // FINANCIAL TERMS (from VenueOffer)
  amount           Float? // Guarantee amount
  doorDeal         Json? // Door split terms
  ticketPrice      Json? // Advance/door pricing
  merchandiseSplit String? // e.g., "90/10"

  // SHOW DETAILS (from VenueOffer)
  billingPosition String? // headliner, support, opener
  lineupPosition  Int? // 1 = headliner, 2 = support, etc.
  setLength       Int? // Minutes
  otherActs       String? // Other acts on the bill
  billingNotes    String? // Additional billing context

  // VENUE DETAILS (from VenueOffer)
  capacity       Int?
  ageRestriction String?

  // EQUIPMENT & LOGISTICS (from VenueOffer)
  equipmentProvided Json? // PA, mics, drums, etc.
  loadIn            String?
  soundcheck        String?
  doorsOpen         String?
  showTime          String?
  curfew            String?

  // ADDITIONAL VALUE (from VenueOffer)
  promotion       Json? // Social, flyers, radio, etc.
  lodging         Json? // Floor space, couch, private room
  additionalTerms String?
  message         String? // Personal pitch

  // TOUR CONTEXT (from TourRequest)
  targetLocations String[] // For artist-initiated requests
  genres          String[] // For filtering

  // EXPIRATION
  expiresAt DateTime? // Auto-expire requests

  // SYSTEM FIELDS
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  artist       Artist           @relation(fields: [artistId], references: [id])
  venue        Venue?           @relation(fields: [venueId], references: [id])
  createdBy    User             @relation(fields: [createdById], references: [id])
  bids         ShowRequestBid[] // New bid model
  holdRequests HoldRequest[]

  // PREVENT DUPLICATES: Same venue can't make multiple offers to same artist on same date
  @@unique([artistId, venueId, requestedDate], name: "unique_artist_venue_date")
  @@index([artistId])
  @@index([venueId])
  @@index([requestedDate])
  @@index([status])
  @@index([initiatedBy])
  @@index([createdAt])
  @@map("show_requests")
}

// ðŸŽ¯ NEW BID MODEL: ShowRequestBid replaces Bid with clearer naming
model ShowRequestBid {
  id              String    @id @default(cuid())
  showRequestId   String
  venueId         String
  bidderId        String
  proposedDate    DateTime?
  message         String?
  amount          Float?
  status          BidStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  acceptedAt      DateTime?
  billingNotes    String?
  billingPosition String?
  cancelledAt     DateTime?
  cancelledReason String?
  declinedAt      DateTime?
  declinedReason  String?
  heldAt          DateTime?
  heldUntil       DateTime?
  holdPosition    Int?
  lineupPosition  Int?
  otherActs       String?
  setLength       Int?

  // RELATIONS
  showRequest ShowRequest @relation(fields: [showRequestId], references: [id])
  venue       Venue       @relation(fields: [venueId], references: [id])
  bidder      User        @relation(fields: [bidderId], references: [id])

  // NEW: Hold state management (same as Bid model)
  holdState      BidHoldState @default(AVAILABLE)
  frozenByHoldId String?      // Reference to hold that froze this bid
  frozenAt       DateTime?    // When this bid was frozen
  unfrozenAt     DateTime?    // When this bid was unfrozen

  // NEW: Enhanced status tracking
  statusHistory Json @default("[]") // Array of status changes with timestamps

  @@index([showRequestId])
  @@index([venueId])
  @@index([bidderId])
  @@index([status])
  @@index([proposedDate])
  @@index([holdPosition])
  @@index([createdAt])
  @@map("show_request_bids")
}

model SceneReport {
  id         String     @id @default(cuid())
  locationId String?
  venueId    String?
  authorId   String
  title      String?
  content    String
  reportType ReportType
  rating     Int?
  createdAt  DateTime   @default(now())
  author     User       @relation(fields: [authorId], references: [id])
  location   Location?  @relation(fields: [locationId], references: [id])
  venue      Venue?     @relation(fields: [venueId], references: [id])

  @@index([locationId])
  @@index([venueId])
  @@index([authorId])
  @@index([reportType])
  @@index([rating])
  @@index([createdAt])
  @@map("scene_reports")
}

model Show {
  id             String          @id @default(cuid())
  title          String
  date           DateTime
  venueId        String
  artistId       String
  description    String?
  ticketPrice    Float?
  ageRestriction AgeRestriction?
  status         ShowStatus      @default(CONFIRMED)
  createdById    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  billingOrder   Json?
  capacity       Int?
  curfew         String?
  doorDeal       Json?
  doorsOpen      String?
  guarantee      Float?
  loadIn         String?
  notes          String?
  showTime       String?
  soundcheck     String?
  artist         Artist          @relation(fields: [artistId], references: [id])
  createdBy      User            @relation(fields: [createdById], references: [id])
  venue          Venue           @relation(fields: [venueId], references: [id])
  holdRequests   HoldRequest[]

  @@index([venueId])
  @@index([artistId])
  @@index([date])
  @@index([status])
  @@index([createdAt])
  @@map("shows")
}

model Bid {
  id              String      @id @default(cuid())
  tourRequestId   String
  venueId         String
  bidderId        String
  proposedDate    DateTime?
  message         String?
  amount          Float?
  status          BidStatus   @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  acceptedAt      DateTime?
  billingNotes    String?
  billingPosition String?
  cancelledAt     DateTime?
  cancelledReason String?
  declinedAt      DateTime?
  declinedReason  String?
  heldAt          DateTime?
  heldUntil       DateTime?
  holdPosition    Int?
  lineupPosition  Int?
  otherActs       String?
  setLength       Int?
  bidder          User        @relation(fields: [bidderId], references: [id])
  tourRequest     TourRequest @relation(fields: [tourRequestId], references: [id])
  venue           Venue       @relation(fields: [venueId], references: [id])

  // NEW: Hold state management
  holdState      BidHoldState @default(AVAILABLE)
  frozenByHoldId String? // Reference to hold that froze this bid
  frozenAt       DateTime? // When this bid was frozen
  unfrozenAt     DateTime? // When this bid was unfrozen

  // NEW: Enhanced status tracking
  statusHistory Json @default("[]") // Array of status changes with timestamps

  @@index([tourRequestId])
  @@index([venueId])
  @@index([bidderId])
  @@index([status])
  @@index([proposedDate])
  @@index([holdPosition])
  @@index([createdAt])
  @@map("bids")
}

model Conversation {
  id           String                    @id @default(cuid())
  title        String?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  participants ConversationParticipant[]
  messages     Message[]

  @@index([createdAt])
  @@index([updatedAt])
  @@map("conversations")
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
  @@map("conversation_participants")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  receiverId     String?
  content        String
  createdAt      DateTime     @default(now())
  readAt         DateTime?
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  receiver       User?        @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
  @@index([readAt])
  @@map("messages")
}

model Feedback {
  id          String           @id @default(cuid())
  type        FeedbackType
  priority    FeedbackPriority
  title       String
  description String
  context     String?
  status      FeedbackStatus   @default(NEW)
  adminNotes  String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([type])
  @@index([priority])
  @@index([status])
  @@index([createdAt])
  @@map("feedback")
}

model MediaEmbed {
  id          String     @id @default(cuid())
  entityType  EntityType
  entityId    String
  url         String
  title       String
  description String?
  order       Int        @default(0)
  isFeatured  Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([entityType, entityId])
  @@index([entityId])
  @@index([order])
  @@index([isFeatured])
  @@map("media_embeds")
}

model Membership {
  id          String           @id @default(cuid())
  userId      String
  entityType  EntityType
  entityId    String
  role        String
  permissions Json?
  status      MembershipStatus @default(ACTIVE)
  joinedAt    DateTime         @default(now())
  invitedBy   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id])

  @@unique([userId, entityType, entityId])
  @@index([entityType, entityId])
  @@index([userId])
  @@index([status])
  @@map("memberships")
}

model Favorite {
  id         String     @id @default(cuid())
  userId     String
  entityType EntityType
  entityId   String
  createdAt  DateTime   @default(now())
  user       User       @relation(fields: [userId], references: [id])

  @@unique([userId, entityType, entityId])
  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("favorites")
}

model ArtistTemplate {
  id                      String       @id @default(cuid())
  artistId                String
  name                    String
  type                    TemplateType
  isDefault               Boolean      @default(false)
  equipment               Json?
  technicalRequirements   Json?
  hospitalityRequirements Json?
  stageRequirements       String?
  soundCheckTime          Int?
  setLength               Int?
  guaranteeRange          Json?
  acceptsDoorDeals        Boolean?
  merchandising           Boolean?
  travelMethod            String?
  lodging                 String?
  dietaryRestrictions     String[]
  expectedDraw            Json?
  ageRestriction          String?
  tourStatus              String?
  priority                String?
  description             String?
  notes                   String?
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  artist                  Artist       @relation(fields: [artistId], references: [id])

  @@index([artistId])
  @@index([type])
  @@index([isDefault])
  @@index([createdAt])
  @@index([name])
  @@map("artist_templates")
}

model VenueOffer {
  id               String     @id @default(cuid())
  venueId          String
  artistId         String // Target artist for this offer
  createdById      String
  title            String // e.g., "Headlining Slot - June 15th"
  description      String?
  proposedDate     DateTime
  alternativeDates DateTime[] // Optional backup dates
  message          String? // Personal pitch to the artist

  // Financial Terms (consistent with Bid model)
  amount           Float? // Guarantee amount
  doorDeal         Json? // Door split terms
  ticketPrice      Json? // Advance/door pricing
  merchandiseSplit String? // e.g., "90/10"

  // Show Details (consistent with Bid model)
  billingPosition String? // headliner, support, opener
  lineupPosition  Int? // 1 = headliner, 2 = support, etc.
  setLength       Int? // Minutes
  otherActs       String? // Other acts on the bill
  billingNotes    String? // Additional billing context

  // Venue Details
  capacity       Int?
  ageRestriction String?

  // Equipment & Logistics (consistent with VenueBidForm)
  equipmentProvided Json? // PA, mics, drums, etc.
  loadIn            String?
  soundcheck        String?
  doorsOpen         String?
  showTime          String?
  curfew            String?

  // Additional Value
  promotion       Json? // Social, flyers, radio, etc.
  lodging         Json? // Floor space, couch, private room
  additionalTerms String?

  // Status Management (consistent with Bid model)
  status          OfferStatus @default(PENDING)
  acceptedAt      DateTime?
  declinedAt      DateTime?
  declinedReason  String?
  cancelledAt     DateTime?
  cancelledReason String?
  expiresAt       DateTime? // Auto-expire offers

  // NEW: Hold state management (same as Bid)
  holdState      BidHoldState @default(AVAILABLE)
  frozenByHoldId String? // Reference to hold that froze this offer
  frozenAt       DateTime? // When this offer was frozen
  unfrozenAt     DateTime? // When this offer was unfrozen

  // NEW: Enhanced status tracking
  statusHistory Json @default("[]") // Array of status changes with timestamps

  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  venue        Venue         @relation(fields: [venueId], references: [id])
  artist       Artist        @relation(fields: [artistId], references: [id])
  createdBy    User          @relation(fields: [createdById], references: [id])
  holdRequests HoldRequest[] // Holds placed on this venue offer

  @@index([venueId])
  @@index([artistId])
  @@index([createdById])
  @@index([status])
  @@index([proposedDate])
  @@index([expiresAt])
  @@index([createdAt])
  @@map("venue_offers")
}

model VenueOfferTemplate {
  id        String  @id @default(cuid())
  venueId   String
  name      String // e.g., "Standard Headliner Offer", "Support Slot Package"
  isDefault Boolean @default(false)

  // Financial Template
  amount           Float? // Default guarantee
  doorDeal         Json? // Default door split
  ticketPrice      Json? // Default ticket pricing
  merchandiseSplit String? // Default merch split

  // Show Template
  billingPosition String? // Default billing position
  setLength       Int? // Default set length

  // Venue Template
  equipmentProvided Json? // Standard equipment offered
  loadIn            String? // Standard load-in time
  soundcheck        String? // Standard soundcheck time
  doorsOpen         String? // Standard doors time
  showTime          String? // Standard show time
  curfew            String? // Standard curfew

  // Value-Add Template
  promotion Json? // Standard promotion support
  lodging   Json? // Standard lodging offering

  // Message Template
  messageTemplate String? // Boilerplate pitch message
  additionalTerms String? // Standard additional terms

  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  venue Venue @relation(fields: [venueId], references: [id])

  @@index([venueId])
  @@index([isDefault])
  @@index([name])
  @@index([createdAt])
  @@map("venue_offer_templates")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum VenueType {
  HOUSE_SHOW
  BASEMENT
  CLUB
  BAR
  COFFEE_SHOP
  RECORD_STORE
  VFW_HALL
  COMMUNITY_CENTER
  WAREHOUSE
  PARK
  AMPHITHEATER
  OTHER
}

enum AgeRestriction {
  ALL_AGES
  EIGHTEEN_PLUS
  TWENTY_ONE_PLUS
}

enum ArtistType {
  BAND
  SOLO
  COLLECTIVE
  DJ
  OTHER
}

enum TourStatus {
  ACTIVE
  INACTIVE
  HIATUS
  SEEKING_MEMBERS
}

enum InfrastructureType {
  LABEL
  RADIO
  RECORD_STORE
  ZINE
  DISTRIBUTOR
  PHOTOGRAPHER
  SOUND_ENGINEER
  PROMOTER
}

enum RequestStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum ReportType {
  VENUE_REVIEW
  SCENE_REPORT
  TOUR_REPORT
  GENERAL
}

enum ShowStatus {
  CONFIRMED
  PENDING
  CANCELLED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
  HOLD
  CANCELLED
}

enum FeedbackType {
  BUG
  FEATURE
  UX
  CONTENT
  OTHER
}

enum FeedbackPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FeedbackStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
  WONT_FIX
}

enum EntityType {
  VENUE
  ARTIST
  SHOW
  SHOW_REQUEST
  BID
  VENUE_OFFER
  HOLD_REQUEST
  MESSAGE
  TOUR_REQUEST
}

enum MembershipStatus {
  ACTIVE
  PENDING
  INACTIVE
}

enum TemplateType {
  TECH_RIDER
  BUSINESS
  LOGISTICS
  COMPLETE
}

enum OfferStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

// ðŸŽ¯ NEW ENUMS for Unified ShowRequest Model
enum RequestInitiator {
  ARTIST
  VENUE
}

enum ShowRequestStatus {
  OPEN // Open for bids
  PENDING // Waiting for response
  CONFIRMED // Accepted and show confirmed
  DECLINED // Rejected
  CANCELLED // Cancelled by requester
  EXPIRED // Expired without response
}

enum HoldStatus {
  PENDING // Waiting for other party to approve
  ACTIVE // Hold is active, timer running
  EXPIRED // Hold time ran out
  CANCELLED // Manually ended early
  DECLINED // Other party rejected the hold
}

// NEW: Bid states for hold management
enum BidHoldState {
  AVAILABLE // Normal bidding state
  FROZEN // Locked due to competing hold
  HELD // This bid has the active hold
  ACCEPTED_HELD // Artist accepted this held bid, waiting for final confirmation
}

enum ActivityType {
  HOLD_REQUEST // Someone requested a hold
  HOLD_GRANTED // Hold was approved
  HOLD_DECLINED // Hold was declined
  MESSAGE // New message in show document
  BID_UPDATE // Bid status changed (accepted, declined, etc.)
  BID_RECEIVED // New bid received
  SHOW_EDIT // Show document was updated
  SHOW_CONFIRMED // Show was confirmed
  TOUR_REQUEST // New tour request application
  MEMBER_INVITE // Invited to join band/venue
  REVIEW_RECEIVED // New review posted
  VENUE_OFFER // New venue offer received
}

model HoldRequest {
  id String @id @default(cuid())

  // WHAT: What document is being held
  showId        String? // For confirmed shows
  showRequestId String? // For show requests being negotiated
  venueOfferId  String? // For venue offers to artists

  // WHO: Hold request parties
  requestedById String // Who requested the hold
  respondedById String? // Who responded to the hold

  // TERMS: Hold details
  duration      Int // Duration in hours
  reason        String // Why the hold is needed
  customMessage String? // Optional additional context

  // STATUS: Hold lifecycle
  status      HoldStatus @default(PENDING)
  requestedAt DateTime   @default(now())
  respondedAt DateTime? // When other party responded
  startsAt    DateTime? // When hold actually begins (after approval)
  expiresAt   DateTime? // When hold expires

  // NEW: Competing bid management
  frozenBidIds    String[] // IDs of bids frozen by this hold
  frozenOfferIds  String[] // IDs of offers frozen by this hold
  notifiedParties String[] // User IDs who have been notified

  // SYSTEM
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  requestedBy User         @relation("RequestedHolds", fields: [requestedById], references: [id])
  respondedBy User?        @relation("RespondedHolds", fields: [respondedById], references: [id])
  show        Show?        @relation(fields: [showId], references: [id])
  showRequest ShowRequest? @relation(fields: [showRequestId], references: [id])
  venueOffer  VenueOffer?  @relation(fields: [venueOfferId], references: [id])

  // NOTE: Application-level validation ensures exactly one of showId, showRequestId, or venueOfferId is set

  @@index([showRequestId, status])
  @@index([status, expiresAt])
  @@map("hold_requests")
}

model ActivityNotification {
  id String @id @default(cuid())

  // WHO: Who should see this notification
  userId String

  // WHAT: Type and content
  type       ActivityType
  title      String // e.g., "Hold Request", "New Message", "Bid Update"
  summary    String // Brief description for single-line display
  fullContent String? // Full message/details for expansion

  // WHERE: What it relates to
  entityType EntityType? // SHOW, SHOW_REQUEST, BID, VENUE_OFFER, etc.
  entityId   String? // ID of the related entity
  actionUrl  String? // Direct link to take action

  // CONTEXT: Additional metadata
  metadata Json? // Flexible storage for context (artist name, show date, etc.)

  // STATE: Read and action status
  isRead     Boolean @default(false)
  readAt     DateTime?
  actionTaken Boolean @default(false) // If user took the suggested action
  actionTakenAt DateTime?

  // SYSTEM
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime? // Some notifications may expire

  // RELATIONS
  user User @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@index([entityType, entityId])
  @@index([expiresAt])
  @@map("activity_notifications")
}
